
MoavleArmSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000019e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000676  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000597  00000000  00000000  000008aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002bc  00000000  00000000  00000e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001100  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034e  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  00001482  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001512  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <servoSetup>:
#include <util/delay.h>		/* Include Delay header file */
unsigned int duty;	
 int servoSetup()
{
	
	TCNT1 = 0;		/* Set timer1 count zero */
  7c:	1d bc       	out	0x2d, r1	; 45
  7e:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 19999;		/* Set TOP count for timer1 in ICR1 register */
  80:	8f e1       	ldi	r24, 0x1F	; 31
  82:	9e e4       	ldi	r25, 0x4E	; 78
  84:	97 bd       	out	0x27, r25	; 39
  86:	86 bd       	out	0x26, r24	; 38
	DDRD |= (1<<PD5);
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	80 62       	ori	r24, 0x20	; 32
  8c:	81 bb       	out	0x11, r24	; 17
	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
  8e:	82 e8       	ldi	r24, 0x82	; 130
  90:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);	
  92:	8b e1       	ldi	r24, 0x1B	; 27
  94:	8e bd       	out	0x2e, r24	; 46
	}
  96:	08 95       	ret

00000098 <main>:
	int main(void)
	{
			/* Make OC1A pin as output */
		
		//DDRD = 0xFF;
		servoSetup();
  98:	0e 94 3e 00 	call	0x7c	; 0x7c <servoSetup>
	
	while(1)
	{	
		
		for(duty=14; duty<32; duty++)   // 0 to max duty cycle
  9c:	8e e0       	ldi	r24, 0x0E	; 14
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  a8:	14 c0       	rjmp	.+40     	; 0xd2 <main+0x3a>
		{
			OCR1A=duty;
  aa:	9b bd       	out	0x2b, r25	; 43
  ac:	8a bd       	out	0x2a, r24	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	89 e6       	ldi	r24, 0x69	; 105
  b2:	98 e1       	ldi	r25, 0x18	; 24
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1c>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x26>
  be:	00 00       	nop
		servoSetup();
	
	while(1)
	{	
		
		for(duty=14; duty<32; duty++)   // 0 to max duty cycle
  c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  da:	80 32       	cpi	r24, 0x20	; 32
  dc:	91 05       	cpc	r25, r1
  de:	28 f3       	brcs	.-54     	; 0xaa <main+0x12>
			_delay_ms(1000);
		//	OCR1A=0x00; 

		}
		
		for(duty=31; duty>=14; duty--)   // max to 0 duty cycle
  e0:	8f e1       	ldi	r24, 0x1F	; 31
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  ec:	14 c0       	rjmp	.+40     	; 0x116 <main+0x7e>
		{
			OCR1A=duty;     //slowly decrease the LED brightness
  ee:	9b bd       	out	0x2b, r25	; 43
  f0:	8a bd       	out	0x2a, r24	; 42
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	89 e6       	ldi	r24, 0x69	; 105
  f6:	98 e1       	ldi	r25, 0x18	; 24
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x60>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x6a>
 102:	00 00       	nop
			_delay_ms(1000);
		//	OCR1A=0x00; 

		}
		
		for(duty=31; duty>=14; duty--)   // max to 0 duty cycle
 104:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 108:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 112:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 116:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 11a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 11e:	8e 30       	cpi	r24, 0x0E	; 14
 120:	91 05       	cpc	r25, r1
 122:	28 f7       	brcc	.-54     	; 0xee <main+0x56>
 124:	bb cf       	rjmp	.-138    	; 0x9c <main+0x4>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
