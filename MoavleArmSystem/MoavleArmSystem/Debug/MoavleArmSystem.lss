
MoavleArmSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060d  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056c  00000000  00000000  000007a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026a  00000000  00000000  00000d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033e  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006d  00000000  00000000  000012da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001347  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main()
{
	unsigned int i;
	TCNT1 = 0;		/* Set timer1 count zero */
  6c:	1d bc       	out	0x2d, r1	; 45
  6e:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;		/* Set TOP count for timer1 in ICR1 register */
  70:	83 ec       	ldi	r24, 0xC3	; 195
  72:	99 e0       	ldi	r25, 0x09	; 9
  74:	97 bd       	out	0x27, r25	; 39
  76:	86 bd       	out	0x26, r24	; 38

	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
  78:	82 ea       	ldi	r24, 0xA2	; 162
  7a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
  7c:	8b e1       	ldi	r24, 0x1B	; 27
  7e:	8e bd       	out	0x2e, r24	; 46
	DDRD = 0b10110000;
  80:	80 eb       	ldi	r24, 0xB0	; 176
  82:	81 bb       	out	0x11, r24	; 17
	while(1)
	{
	for(i=125;i<=250;i++)
  84:	8d e7       	ldi	r24, 0x7D	; 125
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	0f c0       	rjmp	.+30     	; 0xa8 <main+0x3c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	2f ef       	ldi	r18, 0xFF	; 255
  8c:	39 e6       	ldi	r19, 0x69	; 105
  8e:	48 e1       	ldi	r20, 0x18	; 24
  90:	21 50       	subi	r18, 0x01	; 1
  92:	30 40       	sbci	r19, 0x00	; 0
  94:	40 40       	sbci	r20, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0x24>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x2e>
  9a:	00 00       	nop
	{	
	_delay_ms(1000);
	OCR1B = i;
  9c:	99 bd       	out	0x29, r25	; 41
  9e:	88 bd       	out	0x28, r24	; 40
	OCR1A = i;
  a0:	9b bd       	out	0x2b, r25	; 43
  a2:	8a bd       	out	0x2a, r24	; 42
	OCR2  =i;
  a4:	83 bd       	out	0x23, r24	; 35
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
	DDRD = 0b10110000;
	while(1)
	{
	for(i=125;i<=250;i++)
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	8b 3f       	cpi	r24, 0xFB	; 251
  aa:	91 05       	cpc	r25, r1
  ac:	70 f3       	brcs	.-36     	; 0x8a <main+0x1e>
  ae:	ea cf       	rjmp	.-44     	; 0x84 <main+0x18>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
