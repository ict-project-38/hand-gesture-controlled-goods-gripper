
MoavleArmSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a88  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004dc  00000000  00000000  00001259  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001738  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039d  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000510  00000000  00000000  00001b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002069  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <HorizontalStepLeft>:
	
}

void StepStop(){
	DDRB = 0xFF;		/* Make PORTB lower PORTBs as output */
	PORTB = 0x00;
  6c:	8f e0       	ldi	r24, 0x0F	; 15
  6e:	87 bb       	out	0x17, r24	; 23
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	21 c0       	rjmp	.+66     	; 0xb8 <HorizontalStepLeft+0x4c>
  76:	29 e0       	ldi	r18, 0x09	; 9
  78:	28 bb       	out	0x18, r18	; 24
  7a:	ef e2       	ldi	r30, 0x2F	; 47
  7c:	f5 e7       	ldi	r31, 0x75	; 117
  7e:	31 97       	sbiw	r30, 0x01	; 1
  80:	f1 f7       	brne	.-4      	; 0x7e <HorizontalStepLeft+0x12>
  82:	00 c0       	rjmp	.+0      	; 0x84 <HorizontalStepLeft+0x18>
  84:	00 00       	nop
  86:	23 e0       	ldi	r18, 0x03	; 3
  88:	28 bb       	out	0x18, r18	; 24
  8a:	ef e2       	ldi	r30, 0x2F	; 47
  8c:	f5 e7       	ldi	r31, 0x75	; 117
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <HorizontalStepLeft+0x22>
  92:	00 c0       	rjmp	.+0      	; 0x94 <HorizontalStepLeft+0x28>
  94:	00 00       	nop
  96:	26 e0       	ldi	r18, 0x06	; 6
  98:	28 bb       	out	0x18, r18	; 24
  9a:	ef e2       	ldi	r30, 0x2F	; 47
  9c:	f5 e7       	ldi	r31, 0x75	; 117
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <HorizontalStepLeft+0x32>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <HorizontalStepLeft+0x38>
  a4:	00 00       	nop
  a6:	2c e0       	ldi	r18, 0x0C	; 12
  a8:	28 bb       	out	0x18, r18	; 24
  aa:	ef e2       	ldi	r30, 0x2F	; 47
  ac:	f5 e7       	ldi	r31, 0x75	; 117
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <HorizontalStepLeft+0x42>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <HorizontalStepLeft+0x48>
  b4:	00 00       	nop
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	8c 30       	cpi	r24, 0x0C	; 12
  ba:	91 05       	cpc	r25, r1
  bc:	e4 f2       	brlt	.-72     	; 0x76 <HorizontalStepLeft+0xa>
  be:	d8 cf       	rjmp	.-80     	; 0x70 <HorizontalStepLeft+0x4>

000000c0 <pwmsetup>:
}

void pwmsetup()
{
	
	TCNT1 = 0;		/* Set timer1 count zero */
  c0:	1d bc       	out	0x2d, r1	; 45
  c2:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;		/* Set TOP count for timer1 in ICR1 register */
  c4:	83 ec       	ldi	r24, 0xC3	; 195
  c6:	99 e0       	ldi	r25, 0x09	; 9
  c8:	97 bd       	out	0x27, r25	; 39
  ca:	86 bd       	out	0x26, r24	; 38

	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
  cc:	82 ea       	ldi	r24, 0xA2	; 162
  ce:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
  d0:	8b e1       	ldi	r24, 0x1B	; 27
  d2:	8e bd       	out	0x2e, r24	; 46
  d4:	08 95       	ret

000000d6 <main>:
}
int main()
{
	unsigned int i;
	pwmsetup();
  d6:	0e 94 60 00 	call	0xc0	; 0xc0 <pwmsetup>
	DDRC=0xFF;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b10110000;
  de:	80 eb       	ldi	r24, 0xB0	; 176
  e0:	81 bb       	out	0x11, r24	; 17
	while(1)
	{
		HorizontalStepLeft();
  e2:	0e 94 36 00 	call	0x6c	; 0x6c <HorizontalStepLeft>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
